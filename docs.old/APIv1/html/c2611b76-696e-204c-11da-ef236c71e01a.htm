<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>SimpleStateMachine(T) Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="SimpleStateMachine%3CT%3E class" /><meta name="System.Keywords" content="KSPDev.ProcessingUtils.SimpleStateMachine%3CT%3E class" /><meta name="System.Keywords" content="SimpleStateMachine%3CT%3E class, about SimpleStateMachine%3CT%3E class" /><meta name="System.Keywords" content="SimpleStateMachine(Of T) class" /><meta name="System.Keywords" content="KSPDev.ProcessingUtils.SimpleStateMachine(Of T) class" /><meta name="System.Keywords" content="SimpleStateMachine(Of T) class, about SimpleStateMachine(Of T) class" /><meta name="Microsoft.Help.F1" content="KSPDev.ProcessingUtils.SimpleStateMachine`1" /><meta name="Microsoft.Help.Id" content="T:KSPDev.ProcessingUtils.SimpleStateMachine`1" /><meta name="Description" content="Simple state machine that allows tracking states and checking basic conditions." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="KSPDev.ProcessingUtils" /><meta name="file" content="c2611b76-696e-204c-11da-ef236c71e01a" /><meta name="guid" content="c2611b76-696e-204c-11da-ef236c71e01a" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">KAS API v1.0<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="96b60bf7-548e-dbb8-7c6a-5ea716d46790.htm" title="KAS API v1.0" tocid="roottoc">KAS API v1.0</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="5ea0a5e4-faf7-929b-fc7b-034b0bfa325d.htm" title="KSPDev.ProcessingUtils" tocid="5ea0a5e4-faf7-929b-fc7b-034b0bfa325d">KSPDev.ProcessingUtils</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c2611b76-696e-204c-11da-ef236c71e01a.htm" title="SimpleStateMachine(T) Class" tocid="c2611b76-696e-204c-11da-ef236c71e01a">SimpleStateMachine(T) Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="fb6ce103-f236-e698-b43d-ba28c7da8aa4.htm" title="SimpleStateMachine(T) Constructor " tocid="fb6ce103-f236-e698-b43d-ba28c7da8aa4">SimpleStateMachine(T) Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="2e288d97-05b5-4669-4ea4-3b2243b56113.htm" title="SimpleStateMachine(T) Properties" tocid="2e288d97-05b5-4669-4ea4-3b2243b56113">SimpleStateMachine(T) Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="5a3bdc8e-b160-7d0b-1125-8d67cf1bc603.htm" title="SimpleStateMachine(T) Methods" tocid="5a3bdc8e-b160-7d0b-1125-8d67cf1bc603">SimpleStateMachine(T) Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4a4fc80c-1b3d-4610-cdaf-936dd1781cc7.htm" title="SimpleStateMachine(T) Fields" tocid="4a4fc80c-1b3d-4610-cdaf-936dd1781cc7">SimpleStateMachine(T) Fields</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">SimpleStateMachine<span id="LST63CF5498_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_0?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="typeparameter">T</span><span id="LST63CF5498_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_1?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script> Class</td></tr></table><span class="introStyle"></span> <div class="summary">
             Simple state machine that allows tracking states and checking basic conditions.
             </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LST63CF5498_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">KSPDev.ProcessingUtils<span id="LST63CF5498_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>SimpleStateMachine<span id="LST63CF5498_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_4?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST63CF5498_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_5?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="5ea0a5e4-faf7-929b-fc7b-034b0bfa325d.htm">KSPDev.ProcessingUtils</a><br />
    <strong>Assembly:</strong>
   KAS-1.0 (in KAS-1.0.dll) Version: 1.0.0-pre for KSP 1.1.3<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EACA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="identifier">SimpleStateMachine</span>&lt;T&gt;
<span class="keyword">where</span> T : <span class="keyword">struct</span>, <span class="keyword">new</span>(), <span class="identifier">IConvertible</span>
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACA");</script><h4 class="subHeading">Type Parameters</h4><dl><dt><span class="parameter">T</span></dt><dd>
             Enum to use as state constants. Note, that state machine won't consider any value of the enum as
             a valid state. Valid states must be defined via <a href="828fb836-7e91-8048-b203-e5a77c20f902.htm">SetTransitionConstraint(T, <span id="LST63CF5498_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_6?cpp=array&lt;");</script>T<span id="LST63CF5498_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_7?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a>.
             </dd></dl></div><p>The <span class="selflink">SimpleStateMachine<span id="LST63CF5498_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_8?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST63CF5498_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_9?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="fb6ce103-f236-e698-b43d-ba28c7da8aa4.htm">SimpleStateMachine<span id="LST63CF5498_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_10?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST63CF5498_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST63CF5498_11?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary">Constructs new unstarted state machine.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="54bebe21-e223-9fcb-57e9-483d101ed0f7.htm">currentState</a></td><td><div class="summary">Current state of the machine.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="f26f14bf-dc2b-bf14-6b38-c3bf6d1b679c.htm">isStarted</a></td><td><div class="summary">Tells if state machine is started.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="1eaf2bf6-169b-03c6-6678-935f527e390e.htm">isStrict</a></td><td><div class="summary">
            Tells if invalid state transitions will be blocked.  
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="6dd53830-bb74-1335-0d1e-a9cc1be0ced9.htm">AddStateHandlers</a></td><td><div class="summary">Adds listeners for state enter/leave events.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="5c49eefa-9f00-a1c9-61e7-d51217deba83.htm">CheckCanSwitchTo</a></td><td><div class="summary">Verifies if transition is allowed.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="9b1cd5bd-f9de-d6fb-27ea-4270197d0b8e.htm">ForceSetState</a></td><td><div class="summary">Changes current state bypassing any transition or state changes.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="2f5fbfa1-f388-b88c-2e33-e64b92c67428.htm">RemoveHandlers</a></td><td><div class="summary">Removes enter state change event handler.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="6ee023a7-22f0-6ce8-8e7b-38069b284a66.htm">ResetTransitionConstraint</a></td><td><div class="summary">Clears transitions for the soucre state if any.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="828fb836-7e91-8048-b203-e5a77c20f902.htm">SetTransitionConstraint</a></td><td><div class="summary">Defines source state and, optionally, allowed trasitions.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="f5d5c5a2-740a-ac43-1585-d79e1bf089cd.htm">Start</a></td><td><div class="summary">Starts state machine and makes it available for state transitions.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="2d9edccb-909e-bfcf-5fb4-998ad0be3935.htm">Stop</a></td><td><div class="summary">Stops stat machine making it unavailable for any state transitions.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Fields</span></div><div id="ID6RBSection" class="collapsibleSection"><table class="members" id="fieldList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubfield.gif" alt="Public field" title="Public field" /></td><td><a href="0f39872f-9ed5-60cf-f182-9146d1df4e5a.htm">OnDebugStateChange</a></td><td><div class="summary">
            Debug handler for tracking state changes. Avoid using it in normal code logic.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID7RBSection" class="collapsibleSection">
             If module has more that two modes (which can be controlled by a simple boolean) in makes sense
             to define each mode as a state, and intorduce a definite state transition diagram. Once it's
             done most of the mode changes logic can be mvoed in state transition callbacks. Such approach
             significantly simplifies the code and makes it less error prone.
             </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID8RBSection" class="collapsibleSection">
             Here is an example of a module with three states with the following logic:
             <ul><li>State <span class="code">One</span> can be transitioned into both <span class="code">Two</span> and <span class="code">Three</span>.</li><li>States <span class="code">Two</span> and <span class="code">Three</span> can only return back to <span class="code">One</span>.</li><li>In states <span class="code">Two</span> and <span class="code">Three</span> different menu options are available.</li><li>In state <span class="code">One</span> no menu options are available.</li></ul><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABCBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">class</span> MyModule : PartModule {
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">enum</span> MyState {
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    One, Two, Three
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  [KSPField(isPersistant = <span class="highlight-keyword">true</span>)]
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> MyState persistedState = MyState.One;  <span class="highlight-comment">// ALWAYS provide a default value!</span>
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  SimpleStateMachine&lt;MyState&gt; linkStateMachine;
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  [KSPEvent(guiName = <span class="highlight-literal">"State: TWO"</span>)]
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> StateTwoMenuAction() {
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Debug.LogInfo(<span class="highlight-literal">"StateTwoMenuAction()"</span>);
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  [KSPEvent(guiName = <span class="highlight-literal">"State: THREE"</span>)]
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> StateThreeMenuAction() {
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Debug.LogInfo(<span class="highlight-literal">"StateThreeMenuAction()"</span>);
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> OnAwake() {
<span class="highlight-lineno">22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    linkStateMachine = <span class="highlight-keyword">new</span> SimpleStateMachine&lt;MyState&gt;(<span class="highlight-keyword">true</span> <span class="highlight-comment">/* strict */</span>);
<span class="highlight-lineno">23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    linkStateMachine.SetTransitionConstraint(
<span class="highlight-lineno">24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MyState.One,
<span class="highlight-lineno">25</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-keyword">new</span>[] {MyState.Two, MyState.Three});
<span class="highlight-lineno">26</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    linkStateMachine.SetTransitionConstraint(
<span class="highlight-lineno">27</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MyState.Two,
<span class="highlight-lineno">28</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-keyword">new</span>[] {MyState.One});
<span class="highlight-lineno">29</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    linkStateMachine.SetTransitionConstraint(
<span class="highlight-lineno">30</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MyState.Three,
<span class="highlight-lineno">31</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-keyword">new</span>[] {MyState.One});
<span class="highlight-lineno">32</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    linkStateMachine.AddStateHandlers(
<span class="highlight-lineno">33</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MyState.One,
<span class="highlight-lineno">34</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        enterHandler: x =&gt; {
<span class="highlight-lineno">35</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateTwoMenuAction"</span>].active = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">36</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateThreeMenuAction"</span>].active = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">37</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        });
<span class="highlight-lineno">38</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    linkStateMachine.AddStateHandlers(
<span class="highlight-lineno">39</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MyState.Two,
<span class="highlight-lineno">40</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        enterHandler: x =&gt; {
<span class="highlight-lineno">41</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateTwoMenuAction"</span>].active = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno">42</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateThreeMenuAction"</span>].active = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">43</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        });
<span class="highlight-lineno">44</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    linkStateMachine.AddStateHandlers(
<span class="highlight-lineno">45</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MyState.Three,
<span class="highlight-lineno">46</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        enterHandler: x =&gt; {
<span class="highlight-lineno">47</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateTwoMenuAction"</span>].active = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">48</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateThreeMenuAction"</span>].active = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno">49</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        });
<span class="highlight-lineno">50</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">51</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">52</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnStart(PartModule.StartState state) {
<span class="highlight-lineno">53</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    linkStateMachine.Start(persistedState);  <span class="highlight-comment">// Restore state from the save file.</span>
<span class="highlight-lineno">54</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">55</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">56</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">void</span> OnDestory() {
<span class="highlight-lineno">57</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Usually, this isn't needed. But if code needs to do a cleanup job it makes sense to wrap</span>
<span class="highlight-lineno">58</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// it into a handler, and stop the machine in Unity destructor.</span>
<span class="highlight-lineno">59</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    linkStateMachine.Stop();
<span class="highlight-lineno">60</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">61</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">62</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> OnUpdate() {
<span class="highlight-lineno">63</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">if</span> (Input.GetKeyDown(<span class="highlight-literal">"1"</span>)) {
<span class="highlight-lineno">64</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      <span class="highlight-comment">// This transition will always succceed. </span>
<span class="highlight-lineno">65</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      stateMachine.currentState = MyState.One;
<span class="highlight-lineno">66</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">67</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">if</span> (Input.GetKeyDown(<span class="highlight-literal">"2"</span>)) {
<span class="highlight-lineno">68</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      <span class="highlight-comment">// This transition will only succceed if current state is MyState.One. </span>
<span class="highlight-lineno">69</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      stateMachine.currentState = MyState.Two;
<span class="highlight-lineno">70</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">71</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">if</span> (Input.GetKeyDown(<span class="highlight-literal">"3"</span>)) {
<span class="highlight-lineno">72</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      <span class="highlight-comment">// This transition will only succceed if current state is MyState.One. </span>
<span class="highlight-lineno">73</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>      stateMachine.currentState = MyState.Three;
<span class="highlight-lineno">74</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">75</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  }
<span class="highlight-lineno">76</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABCBA");</script><p>
             The same logic could be achivied in a different way. Instead of enabling/disabling all the menu
             items in every "enter" handler the code could define "leave" handlers that would disable the
             related menu item. This way every state handler would control own menu item without interacting
             with any existing or future items.
             </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="5ea0a5e4-faf7-929b-fc7b-034b0bfa325d.htm">KSPDev.ProcessingUtils Namespace</a></div><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="https://kerbalspaceprogram.com/api/class_k_s_p_field.html" target="_blank">
             KSP: KSPField</a></div><div class="seeAlsoStyle"><a href="https://kerbalspaceprogram.com/api/class_k_s_p_event.html" target="_blank">
             KSP: KSPEvent</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://unlicense.org/" target="_blank">Public Domain</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:igor.zavoychinskiy%40gmail.com?Subject=KAS API v1.0">igor.zavoychinskiy@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>